/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package team.dsys.dssearch.rpc;

@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.17.0)", date = "2022-12-10")
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class ShardService {

  public interface Iface {

    public CommonRpcResponse store(int shardId, java.util.List<Doc> docs) throws org.apache.thrift.TException;

    public CommonRpcResponse transferStoreReq(int shardId, java.util.List<Doc> docs) throws org.apache.thrift.TException;

    public java.util.List<ScoreAndDocId> queryTopN(String query, int n, int shardId) throws org.apache.thrift.TException;

    public java.util.List<Doc> getDocList(java.util.List<Integer> sortedDocIds, int shardId) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void store(int shardId, java.util.List<Doc> docs, org.apache.thrift.async.AsyncMethodCallback<CommonRpcResponse> resultHandler) throws org.apache.thrift.TException;

    public void transferStoreReq(int shardId, java.util.List<Doc> docs, org.apache.thrift.async.AsyncMethodCallback<CommonRpcResponse> resultHandler) throws org.apache.thrift.TException;

    public void queryTopN(String query, int n, int shardId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<ScoreAndDocId>> resultHandler) throws org.apache.thrift.TException;

    public void getDocList(java.util.List<Integer> sortedDocIds, int shardId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Doc>> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    @Override
    public CommonRpcResponse store(int shardId, java.util.List<Doc> docs) throws org.apache.thrift.TException
    {
      send_store(shardId, docs);
      return recv_store();
    }

    public void send_store(int shardId, java.util.List<Doc> docs) throws org.apache.thrift.TException
    {
      store_args args = new store_args();
      args.setShardId(shardId);
      args.setDocs(docs);
      sendBase("store", args);
    }

    public CommonRpcResponse recv_store() throws org.apache.thrift.TException
    {
      store_result result = new store_result();
      receiveBase(result, "store");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "store failed: unknown result");
    }

    @Override
    public CommonRpcResponse transferStoreReq(int shardId, java.util.List<Doc> docs) throws org.apache.thrift.TException
    {
      send_transferStoreReq(shardId, docs);
      return recv_transferStoreReq();
    }

    public void send_transferStoreReq(int shardId, java.util.List<Doc> docs) throws org.apache.thrift.TException
    {
      transferStoreReq_args args = new transferStoreReq_args();
      args.setShardId(shardId);
      args.setDocs(docs);
      sendBase("transferStoreReq", args);
    }

    public CommonRpcResponse recv_transferStoreReq() throws org.apache.thrift.TException
    {
      transferStoreReq_result result = new transferStoreReq_result();
      receiveBase(result, "transferStoreReq");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "transferStoreReq failed: unknown result");
    }

    @Override
    public java.util.List<ScoreAndDocId> queryTopN(String query, int n, int shardId) throws org.apache.thrift.TException
    {
      send_queryTopN(query, n, shardId);
      return recv_queryTopN();
    }

    public void send_queryTopN(String query, int n, int shardId) throws org.apache.thrift.TException
    {
      queryTopN_args args = new queryTopN_args();
      args.setQuery(query);
      args.setN(n);
      args.setShardId(shardId);
      sendBase("queryTopN", args);
    }

    public java.util.List<ScoreAndDocId> recv_queryTopN() throws org.apache.thrift.TException
    {
      queryTopN_result result = new queryTopN_result();
      receiveBase(result, "queryTopN");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryTopN failed: unknown result");
    }

    @Override
    public java.util.List<Doc> getDocList(java.util.List<Integer> sortedDocIds, int shardId) throws org.apache.thrift.TException
    {
      send_getDocList(sortedDocIds, shardId);
      return recv_getDocList();
    }

    public void send_getDocList(java.util.List<Integer> sortedDocIds, int shardId) throws org.apache.thrift.TException
    {
      getDocList_args args = new getDocList_args();
      args.setSortedDocIds(sortedDocIds);
      args.setShardId(shardId);
      sendBase("getDocList", args);
    }

    public java.util.List<Doc> recv_getDocList() throws org.apache.thrift.TException
    {
      getDocList_result result = new getDocList_result();
      receiveBase(result, "getDocList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDocList failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
    @Override
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    @Override
    public void store(int shardId, java.util.List<Doc> docs, org.apache.thrift.async.AsyncMethodCallback<CommonRpcResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      store_call method_call = new store_call(shardId, docs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class store_call extends org.apache.thrift.async.TAsyncMethodCall<CommonRpcResponse> {
      private int shardId;
      private java.util.List<Doc> docs;
      public store_call(int shardId, java.util.List<Doc> docs, org.apache.thrift.async.AsyncMethodCallback<CommonRpcResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.shardId = shardId;
        this.docs = docs;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("store", org.apache.thrift.protocol.TMessageType.CALL, 0));
        store_args args = new store_args();
        args.setShardId(shardId);
        args.setDocs(docs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public CommonRpcResponse getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_store();
      }
    }

    @Override
    public void transferStoreReq(int shardId, java.util.List<Doc> docs, org.apache.thrift.async.AsyncMethodCallback<CommonRpcResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      transferStoreReq_call method_call = new transferStoreReq_call(shardId, docs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class transferStoreReq_call extends org.apache.thrift.async.TAsyncMethodCall<CommonRpcResponse> {
      private int shardId;
      private java.util.List<Doc> docs;
      public transferStoreReq_call(int shardId, java.util.List<Doc> docs, org.apache.thrift.async.AsyncMethodCallback<CommonRpcResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.shardId = shardId;
        this.docs = docs;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("transferStoreReq", org.apache.thrift.protocol.TMessageType.CALL, 0));
        transferStoreReq_args args = new transferStoreReq_args();
        args.setShardId(shardId);
        args.setDocs(docs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public CommonRpcResponse getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_transferStoreReq();
      }
    }

    @Override
    public void queryTopN(String query, int n, int shardId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<ScoreAndDocId>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryTopN_call method_call = new queryTopN_call(query, n, shardId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryTopN_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<ScoreAndDocId>> {
      private String query;
      private int n;
      private int shardId;
      public queryTopN_call(String query, int n, int shardId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<ScoreAndDocId>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
        this.n = n;
        this.shardId = shardId;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryTopN", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryTopN_args args = new queryTopN_args();
        args.setQuery(query);
        args.setN(n);
        args.setShardId(shardId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.util.List<ScoreAndDocId> getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryTopN();
      }
    }

    @Override
    public void getDocList(java.util.List<Integer> sortedDocIds, int shardId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Doc>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDocList_call method_call = new getDocList_call(sortedDocIds, shardId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDocList_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Doc>> {
      private java.util.List<Integer> sortedDocIds;
      private int shardId;
      public getDocList_call(java.util.List<Integer> sortedDocIds, int shardId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Doc>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sortedDocIds = sortedDocIds;
        this.shardId = shardId;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDocList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDocList_args args = new getDocList_args();
        args.setSortedDocIds(sortedDocIds);
        args.setShardId(shardId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.util.List<Doc> getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDocList();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("store", new store());
      processMap.put("transferStoreReq", new transferStoreReq());
      processMap.put("queryTopN", new queryTopN());
      processMap.put("getDocList", new getDocList());
      return processMap;
    }

    public static class store<I extends Iface> extends org.apache.thrift.ProcessFunction<I, store_args> {
      public store() {
        super("store");
      }

      @Override
      public store_args getEmptyArgsInstance() {
        return new store_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public store_result getResult(I iface, store_args args) throws org.apache.thrift.TException {
        store_result result = new store_result();
        result.success = iface.store(args.shardId, args.docs);
        return result;
      }
    }

    public static class transferStoreReq<I extends Iface> extends org.apache.thrift.ProcessFunction<I, transferStoreReq_args> {
      public transferStoreReq() {
        super("transferStoreReq");
      }

      @Override
      public transferStoreReq_args getEmptyArgsInstance() {
        return new transferStoreReq_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public transferStoreReq_result getResult(I iface, transferStoreReq_args args) throws org.apache.thrift.TException {
        transferStoreReq_result result = new transferStoreReq_result();
        result.success = iface.transferStoreReq(args.shardId, args.docs);
        return result;
      }
    }

    public static class queryTopN<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryTopN_args> {
      public queryTopN() {
        super("queryTopN");
      }

      @Override
      public queryTopN_args getEmptyArgsInstance() {
        return new queryTopN_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public queryTopN_result getResult(I iface, queryTopN_args args) throws org.apache.thrift.TException {
        queryTopN_result result = new queryTopN_result();
        result.success = iface.queryTopN(args.query, args.n, args.shardId);
        return result;
      }
    }

    public static class getDocList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDocList_args> {
      public getDocList() {
        super("getDocList");
      }

      @Override
      public getDocList_args getEmptyArgsInstance() {
        return new getDocList_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public getDocList_result getResult(I iface, getDocList_args args) throws org.apache.thrift.TException {
        getDocList_result result = new getDocList_result();
        result.success = iface.getDocList(args.sortedDocIds, args.shardId);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("store", new store());
      processMap.put("transferStoreReq", new transferStoreReq());
      processMap.put("queryTopN", new queryTopN());
      processMap.put("getDocList", new getDocList());
      return processMap;
    }

    public static class store<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, store_args, CommonRpcResponse> {
      public store() {
        super("store");
      }

      @Override
      public store_args getEmptyArgsInstance() {
        return new store_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<CommonRpcResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<CommonRpcResponse>() { 
          @Override
          public void onComplete(CommonRpcResponse o) {
            store_result result = new store_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            store_result result = new store_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, store_args args, org.apache.thrift.async.AsyncMethodCallback<CommonRpcResponse> resultHandler) throws org.apache.thrift.TException {
        iface.store(args.shardId, args.docs,resultHandler);
      }
    }

    public static class transferStoreReq<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, transferStoreReq_args, CommonRpcResponse> {
      public transferStoreReq() {
        super("transferStoreReq");
      }

      @Override
      public transferStoreReq_args getEmptyArgsInstance() {
        return new transferStoreReq_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<CommonRpcResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<CommonRpcResponse>() { 
          @Override
          public void onComplete(CommonRpcResponse o) {
            transferStoreReq_result result = new transferStoreReq_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            transferStoreReq_result result = new transferStoreReq_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, transferStoreReq_args args, org.apache.thrift.async.AsyncMethodCallback<CommonRpcResponse> resultHandler) throws org.apache.thrift.TException {
        iface.transferStoreReq(args.shardId, args.docs,resultHandler);
      }
    }

    public static class queryTopN<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryTopN_args, java.util.List<ScoreAndDocId>> {
      public queryTopN() {
        super("queryTopN");
      }

      @Override
      public queryTopN_args getEmptyArgsInstance() {
        return new queryTopN_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<ScoreAndDocId>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<ScoreAndDocId>>() { 
          @Override
          public void onComplete(java.util.List<ScoreAndDocId> o) {
            queryTopN_result result = new queryTopN_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            queryTopN_result result = new queryTopN_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, queryTopN_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<ScoreAndDocId>> resultHandler) throws org.apache.thrift.TException {
        iface.queryTopN(args.query, args.n, args.shardId,resultHandler);
      }
    }

    public static class getDocList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDocList_args, java.util.List<Doc>> {
      public getDocList() {
        super("getDocList");
      }

      @Override
      public getDocList_args getEmptyArgsInstance() {
        return new getDocList_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Doc>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Doc>>() { 
          @Override
          public void onComplete(java.util.List<Doc> o) {
            getDocList_result result = new getDocList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getDocList_result result = new getDocList_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, getDocList_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Doc>> resultHandler) throws org.apache.thrift.TException {
        iface.getDocList(args.sortedDocIds, args.shardId,resultHandler);
      }
    }

  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class store_args implements org.apache.thrift.TBase<store_args, store_args._Fields>, java.io.Serializable, Cloneable, Comparable<store_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("store_args");

    private static final org.apache.thrift.protocol.TField SHARD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("shardId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField DOCS_FIELD_DESC = new org.apache.thrift.protocol.TField("docs", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new store_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new store_argsTupleSchemeFactory();

    public int shardId; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<Doc> docs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SHARD_ID((short)1, "shardId"),
      DOCS((short)2, "docs");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SHARD_ID
            return SHARD_ID;
          case 2: // DOCS
            return DOCS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SHARDID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SHARD_ID, new org.apache.thrift.meta_data.FieldMetaData("shardId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.DOCS, new org.apache.thrift.meta_data.FieldMetaData("docs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Doc.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(store_args.class, metaDataMap);
    }

    public store_args() {
    }

    public store_args(
      int shardId,
      java.util.List<Doc> docs)
    {
      this();
      this.shardId = shardId;
      setShardIdIsSet(true);
      this.docs = docs;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public store_args(store_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.shardId = other.shardId;
      if (other.isSetDocs()) {
        java.util.List<Doc> __this__docs = new java.util.ArrayList<Doc>(other.docs.size());
        for (Doc other_element : other.docs) {
          __this__docs.add(new Doc(other_element));
        }
        this.docs = __this__docs;
      }
    }

    @Override
    public store_args deepCopy() {
      return new store_args(this);
    }

    @Override
    public void clear() {
      setShardIdIsSet(false);
      this.shardId = 0;
      this.docs = null;
    }

    public int getShardId() {
      return this.shardId;
    }

    public store_args setShardId(int shardId) {
      this.shardId = shardId;
      setShardIdIsSet(true);
      return this;
    }

    public void unsetShardId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SHARDID_ISSET_ID);
    }

    /** Returns true if field shardId is set (has been assigned a value) and false otherwise */
    public boolean isSetShardId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SHARDID_ISSET_ID);
    }

    public void setShardIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SHARDID_ISSET_ID, value);
    }

    public int getDocsSize() {
      return (this.docs == null) ? 0 : this.docs.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<Doc> getDocsIterator() {
      return (this.docs == null) ? null : this.docs.iterator();
    }

    public void addToDocs(Doc elem) {
      if (this.docs == null) {
        this.docs = new java.util.ArrayList<Doc>();
      }
      this.docs.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<Doc> getDocs() {
      return this.docs;
    }

    public store_args setDocs(@org.apache.thrift.annotation.Nullable java.util.List<Doc> docs) {
      this.docs = docs;
      return this;
    }

    public void unsetDocs() {
      this.docs = null;
    }

    /** Returns true if field docs is set (has been assigned a value) and false otherwise */
    public boolean isSetDocs() {
      return this.docs != null;
    }

    public void setDocsIsSet(boolean value) {
      if (!value) {
        this.docs = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SHARD_ID:
        if (value == null) {
          unsetShardId();
        } else {
          setShardId((Integer)value);
        }
        break;

      case DOCS:
        if (value == null) {
          unsetDocs();
        } else {
          setDocs((java.util.List<Doc>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SHARD_ID:
        return getShardId();

      case DOCS:
        return getDocs();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SHARD_ID:
        return isSetShardId();
      case DOCS:
        return isSetDocs();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof store_args)
        return this.equals((store_args)that);
      return false;
    }

    public boolean equals(store_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_shardId = true;
      boolean that_present_shardId = true;
      if (this_present_shardId || that_present_shardId) {
        if (!(this_present_shardId && that_present_shardId))
          return false;
        if (this.shardId != that.shardId)
          return false;
      }

      boolean this_present_docs = true && this.isSetDocs();
      boolean that_present_docs = true && that.isSetDocs();
      if (this_present_docs || that_present_docs) {
        if (!(this_present_docs && that_present_docs))
          return false;
        if (!this.docs.equals(that.docs))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + shardId;

      hashCode = hashCode * 8191 + ((isSetDocs()) ? 131071 : 524287);
      if (isSetDocs())
        hashCode = hashCode * 8191 + docs.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(store_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetShardId(), other.isSetShardId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetShardId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shardId, other.shardId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetDocs(), other.isSetDocs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDocs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.docs, other.docs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("store_args(");
      boolean first = true;

      sb.append("shardId:");
      sb.append(this.shardId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("docs:");
      if (this.docs == null) {
        sb.append("null");
      } else {
        sb.append(this.docs);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class store_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public store_argsStandardScheme getScheme() {
        return new store_argsStandardScheme();
      }
    }

    private static class store_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<store_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, store_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SHARD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.shardId = iprot.readI32();
                struct.setShardIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DOCS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.docs = new java.util.ArrayList<Doc>(_list0.size);
                  @org.apache.thrift.annotation.Nullable Doc _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new Doc();
                    _elem1.read(iprot);
                    struct.docs.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setDocsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, store_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SHARD_ID_FIELD_DESC);
        oprot.writeI32(struct.shardId);
        oprot.writeFieldEnd();
        if (struct.docs != null) {
          oprot.writeFieldBegin(DOCS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.docs.size()));
            for (Doc _iter3 : struct.docs)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class store_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public store_argsTupleScheme getScheme() {
        return new store_argsTupleScheme();
      }
    }

    private static class store_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<store_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, store_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetShardId()) {
          optionals.set(0);
        }
        if (struct.isSetDocs()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetShardId()) {
          oprot.writeI32(struct.shardId);
        }
        if (struct.isSetDocs()) {
          {
            oprot.writeI32(struct.docs.size());
            for (Doc _iter4 : struct.docs)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, store_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.shardId = iprot.readI32();
          struct.setShardIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list5 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
            struct.docs = new java.util.ArrayList<Doc>(_list5.size);
            @org.apache.thrift.annotation.Nullable Doc _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new Doc();
              _elem6.read(iprot);
              struct.docs.add(_elem6);
            }
          }
          struct.setDocsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class store_result implements org.apache.thrift.TBase<store_result, store_result._Fields>, java.io.Serializable, Cloneable, Comparable<store_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("store_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new store_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new store_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable CommonRpcResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CommonRpcResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(store_result.class, metaDataMap);
    }

    public store_result() {
    }

    public store_result(
      CommonRpcResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public store_result(store_result other) {
      if (other.isSetSuccess()) {
        this.success = new CommonRpcResponse(other.success);
      }
    }

    @Override
    public store_result deepCopy() {
      return new store_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public CommonRpcResponse getSuccess() {
      return this.success;
    }

    public store_result setSuccess(@org.apache.thrift.annotation.Nullable CommonRpcResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CommonRpcResponse)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof store_result)
        return this.equals((store_result)that);
      return false;
    }

    public boolean equals(store_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(store_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("store_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class store_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public store_resultStandardScheme getScheme() {
        return new store_resultStandardScheme();
      }
    }

    private static class store_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<store_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, store_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CommonRpcResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, store_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class store_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public store_resultTupleScheme getScheme() {
        return new store_resultTupleScheme();
      }
    }

    private static class store_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<store_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, store_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, store_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new CommonRpcResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class transferStoreReq_args implements org.apache.thrift.TBase<transferStoreReq_args, transferStoreReq_args._Fields>, java.io.Serializable, Cloneable, Comparable<transferStoreReq_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("transferStoreReq_args");

    private static final org.apache.thrift.protocol.TField SHARD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("shardId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField DOCS_FIELD_DESC = new org.apache.thrift.protocol.TField("docs", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new transferStoreReq_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new transferStoreReq_argsTupleSchemeFactory();

    public int shardId; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<Doc> docs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SHARD_ID((short)1, "shardId"),
      DOCS((short)2, "docs");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SHARD_ID
            return SHARD_ID;
          case 2: // DOCS
            return DOCS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SHARDID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SHARD_ID, new org.apache.thrift.meta_data.FieldMetaData("shardId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.DOCS, new org.apache.thrift.meta_data.FieldMetaData("docs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Doc.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(transferStoreReq_args.class, metaDataMap);
    }

    public transferStoreReq_args() {
    }

    public transferStoreReq_args(
      int shardId,
      java.util.List<Doc> docs)
    {
      this();
      this.shardId = shardId;
      setShardIdIsSet(true);
      this.docs = docs;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public transferStoreReq_args(transferStoreReq_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.shardId = other.shardId;
      if (other.isSetDocs()) {
        java.util.List<Doc> __this__docs = new java.util.ArrayList<Doc>(other.docs.size());
        for (Doc other_element : other.docs) {
          __this__docs.add(new Doc(other_element));
        }
        this.docs = __this__docs;
      }
    }

    @Override
    public transferStoreReq_args deepCopy() {
      return new transferStoreReq_args(this);
    }

    @Override
    public void clear() {
      setShardIdIsSet(false);
      this.shardId = 0;
      this.docs = null;
    }

    public int getShardId() {
      return this.shardId;
    }

    public transferStoreReq_args setShardId(int shardId) {
      this.shardId = shardId;
      setShardIdIsSet(true);
      return this;
    }

    public void unsetShardId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SHARDID_ISSET_ID);
    }

    /** Returns true if field shardId is set (has been assigned a value) and false otherwise */
    public boolean isSetShardId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SHARDID_ISSET_ID);
    }

    public void setShardIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SHARDID_ISSET_ID, value);
    }

    public int getDocsSize() {
      return (this.docs == null) ? 0 : this.docs.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<Doc> getDocsIterator() {
      return (this.docs == null) ? null : this.docs.iterator();
    }

    public void addToDocs(Doc elem) {
      if (this.docs == null) {
        this.docs = new java.util.ArrayList<Doc>();
      }
      this.docs.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<Doc> getDocs() {
      return this.docs;
    }

    public transferStoreReq_args setDocs(@org.apache.thrift.annotation.Nullable java.util.List<Doc> docs) {
      this.docs = docs;
      return this;
    }

    public void unsetDocs() {
      this.docs = null;
    }

    /** Returns true if field docs is set (has been assigned a value) and false otherwise */
    public boolean isSetDocs() {
      return this.docs != null;
    }

    public void setDocsIsSet(boolean value) {
      if (!value) {
        this.docs = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SHARD_ID:
        if (value == null) {
          unsetShardId();
        } else {
          setShardId((Integer)value);
        }
        break;

      case DOCS:
        if (value == null) {
          unsetDocs();
        } else {
          setDocs((java.util.List<Doc>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SHARD_ID:
        return getShardId();

      case DOCS:
        return getDocs();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SHARD_ID:
        return isSetShardId();
      case DOCS:
        return isSetDocs();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof transferStoreReq_args)
        return this.equals((transferStoreReq_args)that);
      return false;
    }

    public boolean equals(transferStoreReq_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_shardId = true;
      boolean that_present_shardId = true;
      if (this_present_shardId || that_present_shardId) {
        if (!(this_present_shardId && that_present_shardId))
          return false;
        if (this.shardId != that.shardId)
          return false;
      }

      boolean this_present_docs = true && this.isSetDocs();
      boolean that_present_docs = true && that.isSetDocs();
      if (this_present_docs || that_present_docs) {
        if (!(this_present_docs && that_present_docs))
          return false;
        if (!this.docs.equals(that.docs))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + shardId;

      hashCode = hashCode * 8191 + ((isSetDocs()) ? 131071 : 524287);
      if (isSetDocs())
        hashCode = hashCode * 8191 + docs.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(transferStoreReq_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetShardId(), other.isSetShardId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetShardId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shardId, other.shardId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetDocs(), other.isSetDocs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDocs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.docs, other.docs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("transferStoreReq_args(");
      boolean first = true;

      sb.append("shardId:");
      sb.append(this.shardId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("docs:");
      if (this.docs == null) {
        sb.append("null");
      } else {
        sb.append(this.docs);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class transferStoreReq_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public transferStoreReq_argsStandardScheme getScheme() {
        return new transferStoreReq_argsStandardScheme();
      }
    }

    private static class transferStoreReq_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<transferStoreReq_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, transferStoreReq_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SHARD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.shardId = iprot.readI32();
                struct.setShardIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DOCS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.docs = new java.util.ArrayList<Doc>(_list8.size);
                  @org.apache.thrift.annotation.Nullable Doc _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new Doc();
                    _elem9.read(iprot);
                    struct.docs.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setDocsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, transferStoreReq_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SHARD_ID_FIELD_DESC);
        oprot.writeI32(struct.shardId);
        oprot.writeFieldEnd();
        if (struct.docs != null) {
          oprot.writeFieldBegin(DOCS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.docs.size()));
            for (Doc _iter11 : struct.docs)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class transferStoreReq_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public transferStoreReq_argsTupleScheme getScheme() {
        return new transferStoreReq_argsTupleScheme();
      }
    }

    private static class transferStoreReq_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<transferStoreReq_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, transferStoreReq_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetShardId()) {
          optionals.set(0);
        }
        if (struct.isSetDocs()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetShardId()) {
          oprot.writeI32(struct.shardId);
        }
        if (struct.isSetDocs()) {
          {
            oprot.writeI32(struct.docs.size());
            for (Doc _iter12 : struct.docs)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, transferStoreReq_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.shardId = iprot.readI32();
          struct.setShardIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list13 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
            struct.docs = new java.util.ArrayList<Doc>(_list13.size);
            @org.apache.thrift.annotation.Nullable Doc _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new Doc();
              _elem14.read(iprot);
              struct.docs.add(_elem14);
            }
          }
          struct.setDocsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class transferStoreReq_result implements org.apache.thrift.TBase<transferStoreReq_result, transferStoreReq_result._Fields>, java.io.Serializable, Cloneable, Comparable<transferStoreReq_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("transferStoreReq_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new transferStoreReq_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new transferStoreReq_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable CommonRpcResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CommonRpcResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(transferStoreReq_result.class, metaDataMap);
    }

    public transferStoreReq_result() {
    }

    public transferStoreReq_result(
      CommonRpcResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public transferStoreReq_result(transferStoreReq_result other) {
      if (other.isSetSuccess()) {
        this.success = new CommonRpcResponse(other.success);
      }
    }

    @Override
    public transferStoreReq_result deepCopy() {
      return new transferStoreReq_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public CommonRpcResponse getSuccess() {
      return this.success;
    }

    public transferStoreReq_result setSuccess(@org.apache.thrift.annotation.Nullable CommonRpcResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CommonRpcResponse)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof transferStoreReq_result)
        return this.equals((transferStoreReq_result)that);
      return false;
    }

    public boolean equals(transferStoreReq_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(transferStoreReq_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("transferStoreReq_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class transferStoreReq_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public transferStoreReq_resultStandardScheme getScheme() {
        return new transferStoreReq_resultStandardScheme();
      }
    }

    private static class transferStoreReq_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<transferStoreReq_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, transferStoreReq_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CommonRpcResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, transferStoreReq_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class transferStoreReq_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public transferStoreReq_resultTupleScheme getScheme() {
        return new transferStoreReq_resultTupleScheme();
      }
    }

    private static class transferStoreReq_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<transferStoreReq_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, transferStoreReq_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, transferStoreReq_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new CommonRpcResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class queryTopN_args implements org.apache.thrift.TBase<queryTopN_args, queryTopN_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryTopN_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryTopN_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField N_FIELD_DESC = new org.apache.thrift.protocol.TField("n", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField SHARD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("shardId", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryTopN_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryTopN_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable String query; // required
    public int n; // required
    public int shardId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)1, "query"),
      N((short)2, "n"),
      SHARD_ID((short)3, "shardId");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          case 2: // N
            return N;
          case 3: // SHARD_ID
            return SHARD_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __N_ISSET_ID = 0;
    private static final int __SHARDID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.N, new org.apache.thrift.meta_data.FieldMetaData("n", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SHARD_ID, new org.apache.thrift.meta_data.FieldMetaData("shardId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryTopN_args.class, metaDataMap);
    }

    public queryTopN_args() {
    }

    public queryTopN_args(
      String query,
      int n,
      int shardId)
    {
      this();
      this.query = query;
      this.n = n;
      setNIsSet(true);
      this.shardId = shardId;
      setShardIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryTopN_args(queryTopN_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetQuery()) {
        this.query = other.query;
      }
      this.n = other.n;
      this.shardId = other.shardId;
    }

    @Override
    public queryTopN_args deepCopy() {
      return new queryTopN_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
      setNIsSet(false);
      this.n = 0;
      setShardIdIsSet(false);
      this.shardId = 0;
    }

    @org.apache.thrift.annotation.Nullable
    public String getQuery() {
      return this.query;
    }

    public queryTopN_args setQuery(@org.apache.thrift.annotation.Nullable String query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public int getN() {
      return this.n;
    }

    public queryTopN_args setN(int n) {
      this.n = n;
      setNIsSet(true);
      return this;
    }

    public void unsetN() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __N_ISSET_ID);
    }

    /** Returns true if field n is set (has been assigned a value) and false otherwise */
    public boolean isSetN() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __N_ISSET_ID);
    }

    public void setNIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __N_ISSET_ID, value);
    }

    public int getShardId() {
      return this.shardId;
    }

    public queryTopN_args setShardId(int shardId) {
      this.shardId = shardId;
      setShardIdIsSet(true);
      return this;
    }

    public void unsetShardId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SHARDID_ISSET_ID);
    }

    /** Returns true if field shardId is set (has been assigned a value) and false otherwise */
    public boolean isSetShardId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SHARDID_ISSET_ID);
    }

    public void setShardIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SHARDID_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((String)value);
        }
        break;

      case N:
        if (value == null) {
          unsetN();
        } else {
          setN((Integer)value);
        }
        break;

      case SHARD_ID:
        if (value == null) {
          unsetShardId();
        } else {
          setShardId((Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      case N:
        return getN();

      case SHARD_ID:
        return getShardId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      case N:
        return isSetN();
      case SHARD_ID:
        return isSetShardId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof queryTopN_args)
        return this.equals((queryTopN_args)that);
      return false;
    }

    public boolean equals(queryTopN_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      boolean this_present_n = true;
      boolean that_present_n = true;
      if (this_present_n || that_present_n) {
        if (!(this_present_n && that_present_n))
          return false;
        if (this.n != that.n)
          return false;
      }

      boolean this_present_shardId = true;
      boolean that_present_shardId = true;
      if (this_present_shardId || that_present_shardId) {
        if (!(this_present_shardId && that_present_shardId))
          return false;
        if (this.shardId != that.shardId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
      if (isSetQuery())
        hashCode = hashCode * 8191 + query.hashCode();

      hashCode = hashCode * 8191 + n;

      hashCode = hashCode * 8191 + shardId;

      return hashCode;
    }

    @Override
    public int compareTo(queryTopN_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetQuery(), other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetN(), other.isSetN());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetN()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.n, other.n);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetShardId(), other.isSetShardId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetShardId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shardId, other.shardId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryTopN_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("n:");
      sb.append(this.n);
      first = false;
      if (!first) sb.append(", ");
      sb.append("shardId:");
      sb.append(this.shardId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryTopN_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public queryTopN_argsStandardScheme getScheme() {
        return new queryTopN_argsStandardScheme();
      }
    }

    private static class queryTopN_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryTopN_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, queryTopN_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.query = iprot.readString();
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.n = iprot.readI32();
                struct.setNIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SHARD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.shardId = iprot.readI32();
                struct.setShardIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, queryTopN_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          oprot.writeString(struct.query);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_FIELD_DESC);
        oprot.writeI32(struct.n);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SHARD_ID_FIELD_DESC);
        oprot.writeI32(struct.shardId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryTopN_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public queryTopN_argsTupleScheme getScheme() {
        return new queryTopN_argsTupleScheme();
      }
    }

    private static class queryTopN_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryTopN_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryTopN_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        if (struct.isSetN()) {
          optionals.set(1);
        }
        if (struct.isSetShardId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetQuery()) {
          oprot.writeString(struct.query);
        }
        if (struct.isSetN()) {
          oprot.writeI32(struct.n);
        }
        if (struct.isSetShardId()) {
          oprot.writeI32(struct.shardId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryTopN_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.query = iprot.readString();
          struct.setQueryIsSet(true);
        }
        if (incoming.get(1)) {
          struct.n = iprot.readI32();
          struct.setNIsSet(true);
        }
        if (incoming.get(2)) {
          struct.shardId = iprot.readI32();
          struct.setShardIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class queryTopN_result implements org.apache.thrift.TBase<queryTopN_result, queryTopN_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryTopN_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryTopN_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryTopN_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryTopN_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<ScoreAndDocId> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ScoreAndDocId.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryTopN_result.class, metaDataMap);
    }

    public queryTopN_result() {
    }

    public queryTopN_result(
      java.util.List<ScoreAndDocId> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryTopN_result(queryTopN_result other) {
      if (other.isSetSuccess()) {
        java.util.List<ScoreAndDocId> __this__success = new java.util.ArrayList<ScoreAndDocId>(other.success.size());
        for (ScoreAndDocId other_element : other.success) {
          __this__success.add(new ScoreAndDocId(other_element));
        }
        this.success = __this__success;
      }
    }

    @Override
    public queryTopN_result deepCopy() {
      return new queryTopN_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<ScoreAndDocId> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ScoreAndDocId elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<ScoreAndDocId>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<ScoreAndDocId> getSuccess() {
      return this.success;
    }

    public queryTopN_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<ScoreAndDocId> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<ScoreAndDocId>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof queryTopN_result)
        return this.equals((queryTopN_result)that);
      return false;
    }

    public boolean equals(queryTopN_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(queryTopN_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryTopN_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryTopN_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public queryTopN_resultStandardScheme getScheme() {
        return new queryTopN_resultStandardScheme();
      }
    }

    private static class queryTopN_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryTopN_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, queryTopN_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<ScoreAndDocId>(_list16.size);
                  @org.apache.thrift.annotation.Nullable ScoreAndDocId _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = new ScoreAndDocId();
                    _elem17.read(iprot);
                    struct.success.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, queryTopN_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ScoreAndDocId _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryTopN_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public queryTopN_resultTupleScheme getScheme() {
        return new queryTopN_resultTupleScheme();
      }
    }

    private static class queryTopN_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryTopN_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryTopN_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ScoreAndDocId _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryTopN_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
            struct.success = new java.util.ArrayList<ScoreAndDocId>(_list21.size);
            @org.apache.thrift.annotation.Nullable ScoreAndDocId _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = new ScoreAndDocId();
              _elem22.read(iprot);
              struct.success.add(_elem22);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getDocList_args implements org.apache.thrift.TBase<getDocList_args, getDocList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDocList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDocList_args");

    private static final org.apache.thrift.protocol.TField SORTED_DOC_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("sortedDocIds", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField SHARD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("shardId", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDocList_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDocList_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<Integer> sortedDocIds; // required
    public int shardId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SORTED_DOC_IDS((short)1, "sortedDocIds"),
      SHARD_ID((short)2, "shardId");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SORTED_DOC_IDS
            return SORTED_DOC_IDS;
          case 2: // SHARD_ID
            return SHARD_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SHARDID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SORTED_DOC_IDS, new org.apache.thrift.meta_data.FieldMetaData("sortedDocIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      tmpMap.put(_Fields.SHARD_ID, new org.apache.thrift.meta_data.FieldMetaData("shardId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDocList_args.class, metaDataMap);
    }

    public getDocList_args() {
    }

    public getDocList_args(
      java.util.List<Integer> sortedDocIds,
      int shardId)
    {
      this();
      this.sortedDocIds = sortedDocIds;
      this.shardId = shardId;
      setShardIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDocList_args(getDocList_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSortedDocIds()) {
        java.util.List<Integer> __this__sortedDocIds = new java.util.ArrayList<Integer>(other.sortedDocIds);
        this.sortedDocIds = __this__sortedDocIds;
      }
      this.shardId = other.shardId;
    }

    @Override
    public getDocList_args deepCopy() {
      return new getDocList_args(this);
    }

    @Override
    public void clear() {
      this.sortedDocIds = null;
      setShardIdIsSet(false);
      this.shardId = 0;
    }

    public int getSortedDocIdsSize() {
      return (this.sortedDocIds == null) ? 0 : this.sortedDocIds.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<Integer> getSortedDocIdsIterator() {
      return (this.sortedDocIds == null) ? null : this.sortedDocIds.iterator();
    }

    public void addToSortedDocIds(int elem) {
      if (this.sortedDocIds == null) {
        this.sortedDocIds = new java.util.ArrayList<Integer>();
      }
      this.sortedDocIds.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<Integer> getSortedDocIds() {
      return this.sortedDocIds;
    }

    public getDocList_args setSortedDocIds(@org.apache.thrift.annotation.Nullable java.util.List<Integer> sortedDocIds) {
      this.sortedDocIds = sortedDocIds;
      return this;
    }

    public void unsetSortedDocIds() {
      this.sortedDocIds = null;
    }

    /** Returns true if field sortedDocIds is set (has been assigned a value) and false otherwise */
    public boolean isSetSortedDocIds() {
      return this.sortedDocIds != null;
    }

    public void setSortedDocIdsIsSet(boolean value) {
      if (!value) {
        this.sortedDocIds = null;
      }
    }

    public int getShardId() {
      return this.shardId;
    }

    public getDocList_args setShardId(int shardId) {
      this.shardId = shardId;
      setShardIdIsSet(true);
      return this;
    }

    public void unsetShardId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SHARDID_ISSET_ID);
    }

    /** Returns true if field shardId is set (has been assigned a value) and false otherwise */
    public boolean isSetShardId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SHARDID_ISSET_ID);
    }

    public void setShardIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SHARDID_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SORTED_DOC_IDS:
        if (value == null) {
          unsetSortedDocIds();
        } else {
          setSortedDocIds((java.util.List<Integer>)value);
        }
        break;

      case SHARD_ID:
        if (value == null) {
          unsetShardId();
        } else {
          setShardId((Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SORTED_DOC_IDS:
        return getSortedDocIds();

      case SHARD_ID:
        return getShardId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SORTED_DOC_IDS:
        return isSetSortedDocIds();
      case SHARD_ID:
        return isSetShardId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof getDocList_args)
        return this.equals((getDocList_args)that);
      return false;
    }

    public boolean equals(getDocList_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_sortedDocIds = true && this.isSetSortedDocIds();
      boolean that_present_sortedDocIds = true && that.isSetSortedDocIds();
      if (this_present_sortedDocIds || that_present_sortedDocIds) {
        if (!(this_present_sortedDocIds && that_present_sortedDocIds))
          return false;
        if (!this.sortedDocIds.equals(that.sortedDocIds))
          return false;
      }

      boolean this_present_shardId = true;
      boolean that_present_shardId = true;
      if (this_present_shardId || that_present_shardId) {
        if (!(this_present_shardId && that_present_shardId))
          return false;
        if (this.shardId != that.shardId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSortedDocIds()) ? 131071 : 524287);
      if (isSetSortedDocIds())
        hashCode = hashCode * 8191 + sortedDocIds.hashCode();

      hashCode = hashCode * 8191 + shardId;

      return hashCode;
    }

    @Override
    public int compareTo(getDocList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetSortedDocIds(), other.isSetSortedDocIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSortedDocIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortedDocIds, other.sortedDocIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetShardId(), other.isSetShardId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetShardId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shardId, other.shardId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDocList_args(");
      boolean first = true;

      sb.append("sortedDocIds:");
      if (this.sortedDocIds == null) {
        sb.append("null");
      } else {
        sb.append(this.sortedDocIds);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("shardId:");
      sb.append(this.shardId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDocList_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getDocList_argsStandardScheme getScheme() {
        return new getDocList_argsStandardScheme();
      }
    }

    private static class getDocList_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDocList_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getDocList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SORTED_DOC_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.sortedDocIds = new java.util.ArrayList<Integer>(_list24.size);
                  int _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                  {
                    _elem25 = iprot.readI32();
                    struct.sortedDocIds.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setSortedDocIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SHARD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.shardId = iprot.readI32();
                struct.setShardIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getDocList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sortedDocIds != null) {
          oprot.writeFieldBegin(SORTED_DOC_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.sortedDocIds.size()));
            for (int _iter27 : struct.sortedDocIds)
            {
              oprot.writeI32(_iter27);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SHARD_ID_FIELD_DESC);
        oprot.writeI32(struct.shardId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDocList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getDocList_argsTupleScheme getScheme() {
        return new getDocList_argsTupleScheme();
      }
    }

    private static class getDocList_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDocList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDocList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSortedDocIds()) {
          optionals.set(0);
        }
        if (struct.isSetShardId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSortedDocIds()) {
          {
            oprot.writeI32(struct.sortedDocIds.size());
            for (int _iter28 : struct.sortedDocIds)
            {
              oprot.writeI32(_iter28);
            }
          }
        }
        if (struct.isSetShardId()) {
          oprot.writeI32(struct.shardId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDocList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
            struct.sortedDocIds = new java.util.ArrayList<Integer>(_list29.size);
            int _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = iprot.readI32();
              struct.sortedDocIds.add(_elem30);
            }
          }
          struct.setSortedDocIdsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.shardId = iprot.readI32();
          struct.setShardIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getDocList_result implements org.apache.thrift.TBase<getDocList_result, getDocList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDocList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDocList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDocList_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDocList_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<Doc> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Doc.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDocList_result.class, metaDataMap);
    }

    public getDocList_result() {
    }

    public getDocList_result(
      java.util.List<Doc> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDocList_result(getDocList_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Doc> __this__success = new java.util.ArrayList<Doc>(other.success.size());
        for (Doc other_element : other.success) {
          __this__success.add(new Doc(other_element));
        }
        this.success = __this__success;
      }
    }

    @Override
    public getDocList_result deepCopy() {
      return new getDocList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<Doc> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Doc elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Doc>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<Doc> getSuccess() {
      return this.success;
    }

    public getDocList_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<Doc> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Doc>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof getDocList_result)
        return this.equals((getDocList_result)that);
      return false;
    }

    public boolean equals(getDocList_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getDocList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDocList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDocList_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getDocList_resultStandardScheme getScheme() {
        return new getDocList_resultStandardScheme();
      }
    }

    private static class getDocList_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDocList_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getDocList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Doc>(_list32.size);
                  @org.apache.thrift.annotation.Nullable Doc _elem33;
                  for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                  {
                    _elem33 = new Doc();
                    _elem33.read(iprot);
                    struct.success.add(_elem33);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getDocList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Doc _iter35 : struct.success)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDocList_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getDocList_resultTupleScheme getScheme() {
        return new getDocList_resultTupleScheme();
      }
    }

    private static class getDocList_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDocList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDocList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Doc _iter36 : struct.success)
            {
              _iter36.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDocList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
            struct.success = new java.util.ArrayList<Doc>(_list37.size);
            @org.apache.thrift.annotation.Nullable Doc _elem38;
            for (int _i39 = 0; _i39 < _list37.size; ++_i39)
            {
              _elem38 = new Doc();
              _elem38.read(iprot);
              struct.success.add(_elem38);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
