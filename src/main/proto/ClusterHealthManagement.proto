syntax = "proto3";

package proto;

import "RaftRpc.proto";

option java_package = "cluster.proto";

option java_multiple_files = true;

// This file contains the Protobufs definitions for the management operations on clusters,
// such as adding/removing servers, querying RaftNode reports.
// The proto type are referenced from the definition from microraft documentation and microraft report definition

message RaftGroupMembersProto {
  int64 logIndex = 1;
  repeated RaftEndpointProto member = 2;
}

message RaftTermProto {
  int32 term = 1;
  RaftEndpointProto leaderEndpoint = 2;
  RaftEndpointProto votedEndpoint = 3;
}

enum RaftRoleProto {
  LEADER = 0;
  CANDIDATE = 1;
  FOLLOWER = 2;
  LEARNER = 3;
}

enum RaftNodeReportReasonProto {
  STATUS_CHANGE = 0;
  ROLE_CHANGE = 1;
  GROUP_MEMBERS_CHANGE = 2;
  TAKE_SNAPSHOT = 3;
  INSTALL_SNAPSHOT = 4;
  PERIODIC = 5;
  API_CALL = 6;
}

enum RaftNodeStatusProto {
  INITIAL = 0;
  ACTIVE = 1;
  UPDATING_RAFT_GROUP_MEMBER_LIST = 2;
  TERMINATED = 3;
}

message RaftLogStatsProto {
  int64 commitIndex = 1;
  int64 lastLogOrSnapshotTerm = 2;
  int64 lastLogOrSnapshotIndex = 3;
  int64 snapshotTerm = 4;
  int64 snapshotIndex = 5;
  int32 takeSnapshotCount = 6;
  int32 installSnapshotCount = 7;
  map<string, int64> followerMatchIndex = 8;
}

message RaftNodeReportProto {
  RaftNodeReportReasonProto reason = 1;
  string groupId = 2;
  RaftEndpointProto endpoint = 3;
  RaftGroupMembersProto initialMembers = 4;
  RaftGroupMembersProto committedMembers = 5;
  RaftGroupMembersProto effectiveMembers = 6;
  RaftRoleProto role = 7;
  RaftNodeStatusProto status = 8;
  RaftTermProto term = 9;
  RaftLogStatsProto log = 10;
}

// The request/response messages below are for managing clusters by
// querying states and changing group memberships.

message GetRaftNodeReportRequest {
}

message GetRaftNodeReportResponse {
  // RaftNodeReport fetched from the RaftNode object running in the contacted instance.
  RaftNodeReportProto report = 1;
  // RaftEndpoint -> address pairs known by a contacted instance.
  map<string, string> endpointAddress = 2;
}

message AddRaftEndpointAddressRequest {
  // RaftEndpoint for which the address is going to be specified.
  RaftEndpointProto endpoint = 1;

  // Address of the RaftEndpoint which will be used by instances to
  // communicate for that RaftEndpoint.
  string address = 2;
}

message AddRaftEndpointAddressResponse {
}

message AddRaftEndpointRequest {
  RaftEndpointProto endpoint = 1;
  bool votingMember = 2;
  int64 groupMembersCommitIndex = 3;
}

message AddRaftEndpointResponse {
  int64 groupMembersCommitIndex = 1;
}


service ManagementRequestHandler {
  // Fetches the RaftNodeReport object from the RaftNode object running
  // inside a server
  rpc getRaftNodeReport (GetRaftNodeReportRequest) returns (GetRaftNodeReportResponse) {
  }

  // Adds the given RaftEndpoint -> address mapping to a server.
  // Before adding a new server is added to the cluster, its
  // RaftEndpoint's address must be added to all running servers.
  rpc addRaftEndpointAddress (AddRaftEndpointAddressRequest) returns (AddRaftEndpointAddressResponse) {
  }

  // Adds a new server to the cluster.
  // When this api is called, microraft will trigger corresponding membershipchange request
  //note that this request is only sent to the leader
  //before calling this, every current node must have raftendpoint address of the adding node
  //This can be implemented at the method above
  rpc addRaftEndpoint (AddRaftEndpointRequest) returns (AddRaftEndpointResponse) {
  }


}
